
"""Autogenerated API from documentation"""
from requests import Response, Session
import json
from datetime import datetime as dt
import os

__slots__ = ('ShikimoriAPI')


class ShikimoriAPI:
    def __init__(self, app_name, client_id = None, client_secret = None):
        self.session = Session()
        self.client_id = client_id
        self.client_secret = client_secret

        self.session.headers.update({
            'User-Agent': app_name,
            "Accept": "application/json, text/plain, */*"
        })
        self.token_file = 'shikimori-token.json'

        if client_id and client_secret:
            if os.path.exists(self.token_file):
                with open(self.token_file, 'r') as f:
                    cur_token = json.load(f)
                    token_expire_at = dt.fromtimestamp(int(cur_token["created_at"]) + int(cur_token["expires_in"]))
                    if dt.now() > token_expire_at:
                        print('Обновление токена')
                        self.refresh_access_token(cur_token['refresh_token'])
                    else:
                        print('Token')
                        self.apply_access_token(cur_token)
            else:
                self.get_access_token()

        self.achievements = Achievements(self.session)
        self.animes = Animes(self.session)
        self.topics = Topics(self.session)
        self.appear = Appear(self.session)
        self.bans = Bans(self.session)
        self.calendars = Calendars(self.session)
        self.characters = Characters(self.session)
        self.clubs = Clubs(self.session)
        self.comments = Comments(self.session)
        self.constants = Constants(self.session)
        self.dialogs = Dialogs(self.session)
        self.favorites = Favorites(self.session)
        self.forums = Forums(self.session)
        self.friends = Friends(self.session)
        self.genres = Genres(self.session)
        self.ignores = Ignores(self.session)
        self.mangas = Mangas(self.session)
        self.messages = Messages(self.session)
        self.people = People(self.session)
        self.publishers = Publishers(self.session)
        self.ranobe = Ranobe(self.session)
        self.stats = Stats(self.session)
        self.studios = Studios(self.session)
        self.styles = Styles(self.session)
        self.topic_ignores = TopicIgnores(self.session)
        self.user_images = UserImages(self.session)
        self.user_rates = UserRates(self.session)
        self.users = Users(self.session)
        self.videos = Videos(self.session)

    def get_access_token(self):
        auth_code = input('Введите код авторизации: ')
        token = self.session.post('https://shikimori.one/oauth/token', data={
            'grant_type': 'authorization_code',
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'code': auth_code,
            'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob'
        }).json()

        with open(self.token_file, 'w') as f:
            json.dump(token, f)

        self.apply_access_token(token)

    def refresh_access_token(self, refresh_token):
        token = self.session.post('https://shikimori.one/oauth/token', data={
            'grant_type': 'refresh_code',
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'refresh_token': refresh_token,
        }).json()

        with open(self.token_file, 'w') as f:
            json.dump(token, f)

        self.apply_access_token(token)

    # def check_access_token(self):
    #     with open(self.token_file, 'r') as f:
    #         cur_token = json.load(f)
    #         token_expire_at = dt.fromtimestamp(int(cur_token["created_at"]) + int(cur_token["expires_in"]))
    #         return dt.now() > token_expire_at

    def apply_access_token(self, token):
        self.session.headers.update({
            'Authorization': f'{token["token_type"]} {token["access_token"]}'
        })


class Achievements:
    """https://shikimori.one/api/doc/1.0/achievements 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List user achievements
    
        Deprecated:
            False
        
        Params:
            user_id (numeric). Required - True. Must be a number.
        """
        url = 'https://shikimori.one/api/achievements'
        return self.session.request("GET", url, **kwargs)
    

class Animes:
    """https://shikimori.one/api/doc/1.0/animes 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List animes
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            order (string). Required - False. Must be one of: <code>id</code>, <code>id_desc</code>, <code>ranked</code>, <code>kind</code>, <code>popularity</code>, <code>name</code>, <code>aired_on</code>, <code>episodes</code>, <code>status</code>, <code>random</code>, <code>ranked_random</code>, <code>ranked_shiki</code>, <code>created_at</code>, <code>created_at_desc</code>.
            type (string). Required - False. 
            kind (string). Required - False. 
            status (string). Required - False. 
            season (string). Required - False. 
            score (numeric). Required - False. Must be a number.
            duration (string). Required - False. 
            rating (string). Required - False. 
            genre (string). Required - False. 
            studio (string). Required - False. 
            franchise (string). Required - False. 
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
            mylist (string). Required - False. 
            ids (string). Required - False. 
            exclude_ids (string). Required - False. 
            search (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/animes'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show an anime
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def roles(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/roles'
        return self.session.request("GET", url, **kwargs)
    
    def similar(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/similar'
        return self.session.request("GET", url, **kwargs)
    
    def related(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/related'
        return self.session.request("GET", url, **kwargs)
    
    def screenshots(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/screenshots'
        return self.session.request("GET", url, **kwargs)
    
    def videos(self, id, **kwargs) -> Response:
        """Use Videos API instead
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/videos'
        return self.session.request("GET", url, **kwargs)
    
    def franchise(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/franchise'
        return self.session.request("GET", url, **kwargs)
    
    def external_links(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{id}/external_links'
        return self.session.request("GET", url, **kwargs)
    
    def search(self, **kwargs) -> Response:
        """Use "List animes" API instead
    
        Deprecated:
            True
        
        Params:
            
        """
        url = 'https://shikimori.one/api/animes/search'
        return self.session.request("GET", url, **kwargs)
    
    def topics(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            kind (string). Required - False. Must be one of: <code>anons</code>, <code>ongoing</code>, <code>released</code>, <code>episode</code>.
            episode (numeric). Required - False. Must be a number.
        """
        url = f'https://shikimori.one/api/animes/{id}/topics'
        return self.session.request("GET", url, **kwargs)
    

class Topics:
    """https://shikimori.one/api/doc/1.0/topics 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List topics
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            forum (string). Required - False. Must be one of: <code>all</code>, <code>animanga</code>, <code>site</code>, <code>games</code>, <code>vn</code>, <code>contests</code>, <code>offtopic</code>, <code>clubs</code>, <code>my_clubs</code>, <code>critiques</code>, <code>news</code>, <code>collections</code>, <code>articles</code>, <code>cosplay</code>.
            linked_id (numeric). Required - False. Must be a number.
            linked_type (string). Required - False. Must be one of: <code>Anime</code>, <code>Manga</code>, <code>Ranobe</code>, <code>Character</code>, <code>Person</code>, <code>Club</code>, <code>ClubPage</code>, <code>Critique</code>, <code>Review</code>, <code>Contest</code>, <code>CosplayGallery</code>, <code>Collection</code>, <code>Article</code>.
            type (string). Required - False. Must be one of: <code>Topic</code>, <code>Topics::ClubUserTopic</code>, <code>Topics::EntryTopic</code>, <code>Topics::EntryTopics::AnimeTopic</code>, <code>Topics::EntryTopics::ArticleTopic</code>, <code>Topics::EntryTopics::CharacterTopic</code>, <code>Topics::EntryTopics::ClubPageTopic</code>, <code>Topics::EntryTopics::ClubTopic</code>, <code>Topics::EntryTopics::CollectionTopic</code>, <code>Topics::EntryTopics::ContestTopic</code>, <code>Topics::EntryTopics::CosplayGalleryTopic</code>, <code>Topics::EntryTopics::MangaTopic</code>, <code>Topics::EntryTopics::PersonTopic</code>, <code>Topics::EntryTopics::RanobeTopic</code>, <code>Topics::EntryTopics::CritiqueTopic</code>, <code>Topics::EntryTopics::ReviewTopic</code>, <code>Topics::NewsTopic</code>, <code>Topics::NewsTopics::ContestStatusTopic</code>.
        """
        url = 'https://shikimori.one/api/topics'
        return self.session.request("GET", url, **kwargs)
    
    def updates(self, **kwargs) -> Response:
        """NewsTopics about database updates
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
        """
        url = 'https://shikimori.one/api/topics/updates'
        return self.session.request("GET", url, **kwargs)
    
    def hot(self, **kwargs) -> Response:
        """Hot topics
    
        Deprecated:
            False
        
        Params:
            limit (numeric). Required - False. Must be a number.
        """
        url = 'https://shikimori.one/api/topics/hot'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show a topic
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/topics/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def create(self, **kwargs) -> Response:
        """Create a topic
    
        Deprecated:
            False
        
        Params:
            topic (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/topics'
        return self.session.request("POST", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update a topic
    
        Deprecated:
            False
        
        Params:
            topic (hash). Required - False. Must be a Hash
        """
        url = f'https://shikimori.one/api/topics/{id}'
        return self.session.request("PATCH", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy a topic
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/topics/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class Appear:
    """https://shikimori.one/api/doc/1.0/appear 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, **kwargs) -> Response:
        """Mark comments or topics as read
    
        Deprecated:
            False
        
        Params:
            ids (string). Required - False. 
        """
        url = 'https://shikimori.one/api/appears'
        return self.session.request("POST", url, **kwargs)
    

class Bans:
    """https://shikimori.one/api/doc/1.0/bans 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List bans
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/bans'
        return self.session.request("GET", url, **kwargs)
    

class Calendars:
    """https://shikimori.one/api/doc/1.0/calendars 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, **kwargs) -> Response:
        """Show a calendar
    
        Deprecated:
            False
        
        Params:
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
        """
        url = 'https://shikimori.one/api/calendar'
        return self.session.request("GET", url, **kwargs)
    

class Characters:
    """https://shikimori.one/api/doc/1.0/characters 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show a character
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/characters/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def search(self, **kwargs) -> Response:
        """Search characters
    
        Deprecated:
            False
        
        Params:
            search (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/characters/search'
        return self.session.request("GET", url, **kwargs)
    

class Clubs:
    """https://shikimori.one/api/doc/1.0/clubs 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List clubs
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            search (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/clubs'
        return self.session.request("GET", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update a club
    
        Deprecated:
            False
        
        Params:
            club (hash). Required - False. Must be a Hash
        """
        url = f'https://shikimori.one/api/clubs/{id}'
        return self.session.request("PATCH", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show a club
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def animes(self, id, **kwargs) -> Response:
        """Show club's animes
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/animes'
        return self.session.request("GET", url, **kwargs)
    
    def mangas(self, id, **kwargs) -> Response:
        """Show club's mangas
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/mangas'
        return self.session.request("GET", url, **kwargs)
    
    def ranobe(self, id, **kwargs) -> Response:
        """Show club's ranobe
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/ranobe'
        return self.session.request("GET", url, **kwargs)
    
    def characters(self, id, **kwargs) -> Response:
        """Show club's characters
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/characters'
        return self.session.request("GET", url, **kwargs)
    
    def members(self, id, **kwargs) -> Response:
        """Show club's members
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/members'
        return self.session.request("GET", url, **kwargs)
    
    def images(self, id, **kwargs) -> Response:
        """Show club's images
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/images'
        return self.session.request("GET", url, **kwargs)
    
    def join(self, id, **kwargs) -> Response:
        """Join a club
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/join'
        return self.session.request("POST", url, **kwargs)
    
    def leave(self, id, **kwargs) -> Response:
        """Leave a club
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/clubs/{id}/leave'
        return self.session.request("POST", url, **kwargs)
    

class Comments:
    """https://shikimori.one/api/doc/1.0/comments 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show a comment
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/comments/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def index(self, **kwargs) -> Response:
        """List comments
    
        Deprecated:
            False
        
        Params:
            commentable_id (numeric). Required - True. Must be a number.
            commentable_type (string). Required - True. Must be a String
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            desc (string). Required - False. Must be one of: <code>1</code>, <code>0</code>.
        """
        url = 'https://shikimori.one/api/comments'
        return self.session.request("GET", url, **kwargs)
    
    def create(self, **kwargs) -> Response:
        """Create a comment
    
        Deprecated:
            False
        
        Params:
            comment (hash). Required - False. Must be a Hash
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
            broadcast (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
        """
        url = 'https://shikimori.one/api/comments'
        return self.session.request("POST", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update a comment
    
        Deprecated:
            False
        
        Params:
            comment (hash). Required - False. Must be a Hash
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
        """
        url = f'https://shikimori.one/api/comments/{id}'
        return self.session.request("PATCH", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy a comment
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/comments/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class Constants:
    """https://shikimori.one/api/doc/1.0/constants 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def anime(self, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/constants/anime'
        return self.session.request("GET", url, **kwargs)
    
    def manga(self, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/constants/manga'
        return self.session.request("GET", url, **kwargs)
    
    def user_rate(self, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/constants/user_rate'
        return self.session.request("GET", url, **kwargs)
    
    def club(self, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/constants/club'
        return self.session.request("GET", url, **kwargs)
    
    def smileys(self, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/constants/smileys'
        return self.session.request("GET", url, **kwargs)
    

class Dialogs:
    """https://shikimori.one/api/doc/1.0/dialogs 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List dialogs
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/dialogs'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show a dialog
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/dialogs/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy a dialog
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/dialogs/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class Favorites:
    """https://shikimori.one/api/doc/1.0/favorites 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, linked_type, **kwargs) -> Response:
        """Create a favorite
    
        Deprecated:
            False
        
        Params:
            linked_id (string). Required - True. 
            linked_type (string). Required - True. 
            kind (string). Required - False. 
        """
        url = f'https://shikimori.one/api/favorites/{linked_type}/:linked_id(/:kind)'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, linked_type, **kwargs) -> Response:
        """Destroy a favorite
    
        Deprecated:
            False
        
        Params:
            linked_id (string). Required - True. 
            linked_type (string). Required - True. 
        """
        url = f'https://shikimori.one/api/favorites/{linked_type}/:linked_id'
        return self.session.request("DELETE", url, **kwargs)
    
    def reorder(self, id, **kwargs) -> Response:
        """Assign a new position to a favorite
    
        Deprecated:
            False
        
        Params:
            new_index (string). Required - False. 
        """
        url = f'https://shikimori.one/api/favorites/{id}/reorder'
        return self.session.request("POST", url, **kwargs)
    

class Forums:
    """https://shikimori.one/api/doc/1.0/forums 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List of forums
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/forums'
        return self.session.request("GET", url, **kwargs)
    

class Friends:
    """https://shikimori.one/api/doc/1.0/friends 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, id, **kwargs) -> Response:
        """Create a friend
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/friends/{id}'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy a friend
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/friends/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class Genres:
    """https://shikimori.one/api/doc/1.0/genres 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List genres
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/genres'
        return self.session.request("GET", url, **kwargs)
    

class Ignores:
    """https://shikimori.one/api/doc/1.0/ignores 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, id, **kwargs) -> Response:
        """Create an ignore
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ignores/{id}'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy an ignore
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ignores/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class Mangas:
    """https://shikimori.one/api/doc/1.0/mangas 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List mangas
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            order (string). Required - False. Must be one of: <code>id</code>, <code>id_desc</code>, <code>ranked</code>, <code>kind</code>, <code>popularity</code>, <code>name</code>, <code>aired_on</code>, <code>volumes</code>, <code>chapters</code>, <code>status</code>, <code>random</code>, <code>ranked_random</code>, <code>ranked_shiki</code>, <code>created_at</code>, <code>created_at_desc</code>.
            type (string). Required - False. 
            kind (string). Required - False. 
            status (string). Required - False. 
            season (string). Required - False. 
            score (numeric). Required - False. Must be a number.
            genre (string). Required - False. 
            publisher (string). Required - False. 
            franchise (string). Required - False. 
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
            mylist (string). Required - False. 
            ids (string). Required - False. 
            exclude_ids (string). Required - False. 
            search (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/mangas'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show a manga
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def roles(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}/roles'
        return self.session.request("GET", url, **kwargs)
    
    def similar(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}/similar'
        return self.session.request("GET", url, **kwargs)
    
    def related(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}/related'
        return self.session.request("GET", url, **kwargs)
    
    def franchise(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}/franchise'
        return self.session.request("GET", url, **kwargs)
    
    def external_links(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/mangas/{id}/external_links'
        return self.session.request("GET", url, **kwargs)
    
    def search(self, **kwargs) -> Response:
        """Use "List mangas" API instead
    
        Deprecated:
            True
        
        Params:
            
        """
        url = 'https://shikimori.one/api/mangas/search'
        return self.session.request("GET", url, **kwargs)
    
    def topics(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
        """
        url = f'https://shikimori.one/api/mangas/{id}/topics'
        return self.session.request("GET", url, **kwargs)
    

class Messages:
    """https://shikimori.one/api/doc/1.0/messages 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show a message
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/messages/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def create(self, **kwargs) -> Response:
        """Create a message
    
        Deprecated:
            False
        
        Params:
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
            message (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/messages'
        return self.session.request("POST", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update a message
    
        Deprecated:
            False
        
        Params:
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
            message (hash). Required - True. Must be a Hash
        """
        url = f'https://shikimori.one/api/messages/{id}'
        return self.session.request("PATCH", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy a message
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/messages/{id}'
        return self.session.request("DELETE", url, **kwargs)
    
    def mark_read(self, **kwargs) -> Response:
        """Mark messages as read or unread
    
        Deprecated:
            False
        
        Params:
            ids (string). Required - False. 
            is_read (string). Required - False. Must be one of: <code>0</code>, <code>1</code>.
        """
        url = 'https://shikimori.one/api/messages/mark_read'
        return self.session.request("POST", url, **kwargs)
    
    def read_all(self, **kwargs) -> Response:
        """Mark all messages as read
    
        Deprecated:
            False
        
        Params:
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
            type (string). Required - True. Must be one of: <code>news</code>, <code>notifications</code>.
        """
        url = 'https://shikimori.one/api/messages/read_all'
        return self.session.request("POST", url, **kwargs)
    
    def delete_all(self, **kwargs) -> Response:
        """Delete all messages
    
        Deprecated:
            False
        
        Params:
            frontend (boolean). Required - False. Must be one of: <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>.
            type (string). Required - True. Must be one of: <code>news</code>, <code>notifications</code>.
        """
        url = 'https://shikimori.one/api/messages/delete_all'
        return self.session.request("POST", url, **kwargs)
    

class People:
    """https://shikimori.one/api/doc/1.0/people 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show a person
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/people/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def search(self, **kwargs) -> Response:
        """Search people
    
        Deprecated:
            False
        
        Params:
            search (string). Required - False. Must be a String
            kind (string). Required - False. Must be one of: <code>seyu</code>, <code>mangaka</code>, <code>producer</code>.
        """
        url = 'https://shikimori.one/api/people/search'
        return self.session.request("GET", url, **kwargs)
    

class Publishers:
    """https://shikimori.one/api/doc/1.0/publishers 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List publishers
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/publishers'
        return self.session.request("GET", url, **kwargs)
    

class Ranobe:
    """https://shikimori.one/api/doc/1.0/ranobe 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List ranobe
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            order (string). Required - False. Must be one of: <code>id</code>, <code>id_desc</code>, <code>ranked</code>, <code>kind</code>, <code>popularity</code>, <code>name</code>, <code>aired_on</code>, <code>volumes</code>, <code>chapters</code>, <code>status</code>, <code>random</code>, <code>ranked_random</code>, <code>ranked_shiki</code>, <code>created_at</code>, <code>created_at_desc</code>.
            status (string). Required - False. 
            season (string). Required - False. 
            score (numeric). Required - False. Must be a number.
            genre (string). Required - False. 
            publisher (string). Required - False. 
            franchise (string). Required - False. 
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
            mylist (string). Required - False. 
            ids (string). Required - False. 
            exclude_ids (string). Required - False. 
            search (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/ranobe'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show a ranobe
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def roles(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}/roles'
        return self.session.request("GET", url, **kwargs)
    
    def similar(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}/similar'
        return self.session.request("GET", url, **kwargs)
    
    def related(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}/related'
        return self.session.request("GET", url, **kwargs)
    
    def franchise(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}/franchise'
        return self.session.request("GET", url, **kwargs)
    
    def external_links(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/ranobe/{id}/external_links'
        return self.session.request("GET", url, **kwargs)
    
    def topics(self, id, **kwargs) -> Response:
        """
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
        """
        url = f'https://shikimori.one/api/ranobe/{id}/topics'
        return self.session.request("GET", url, **kwargs)
    

class Stats:
    """https://shikimori.one/api/doc/1.0/stats 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def active_users(self, **kwargs) -> Response:
        """Users having at least 1 completed animes and active during last month
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/stats/active_users'
        return self.session.request("GET", url, **kwargs)
    

class Studios:
    """https://shikimori.one/api/doc/1.0/studios 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List studios
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/studios'
        return self.session.request("GET", url, **kwargs)
    

class Styles:
    """https://shikimori.one/api/doc/1.0/styles 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show a style
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/styles/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def preview(self, **kwargs) -> Response:
        """Preview a style
    
        Deprecated:
            False
        
        Params:
            style (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/styles/preview'
        return self.session.request("POST", url, **kwargs)
    
    def create(self, **kwargs) -> Response:
        """Create a style
    
        Deprecated:
            False
        
        Params:
            style (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/styles'
        return self.session.request("POST", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update a style
    
        Deprecated:
            False
        
        Params:
            style (hash). Required - False. Must be a Hash
        """
        url = f'https://shikimori.one/api/styles/{id}'
        return self.session.request("PATCH", url, **kwargs)
    

class TopicIgnores:
    """https://shikimori.one/api/doc/1.0/topic_ignores 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, **kwargs) -> Response:
        """Create an ignore
    
        Deprecated:
            True
        
        Params:
            topic_ignore (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/topic_ignores'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy an ignore
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/topic_ignores/{id}'
        return self.session.request("DELETE", url, **kwargs)
    

class UserImages:
    """https://shikimori.one/api/doc/1.0/user_images 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def create(self, **kwargs) -> Response:
        """Create an user image
    
        Deprecated:
            False
        
        Params:
            image (string). Required - True. 
            linked_type (string). Required - False. Must be a String
        """
        url = 'https://shikimori.one/api/user_images'
        return self.session.request("POST", url, **kwargs)
    

class UserRates:
    """https://shikimori.one/api/doc/1.0/user_rates 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def show(self, id, **kwargs) -> Response:
        """Show an user rate
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/user_rates/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def create(self, **kwargs) -> Response:
        """Create an user rate
    
        Deprecated:
            True
        
        Params:
            user_rate (hash). Required - False. Must be a Hash
        """
        url = 'https://shikimori.one/api/user_rates'
        return self.session.request("POST", url, **kwargs)
    
    def update(self, id, **kwargs) -> Response:
        """Update an user rate
    
        Deprecated:
            True
        
        Params:
            user_rate (hash). Required - False. Must be a Hash
        """
        url = f'https://shikimori.one/api/user_rates/{id}'
        return self.session.request("PATCH", url, **kwargs)
    
    def increment(self, id, **kwargs) -> Response:
        """Increment episodes/chapters by 1
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/user_rates/{id}/increment'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, id, **kwargs) -> Response:
        """Destroy an user rate
    
        Deprecated:
            True
        
        Params:
            
        """
        url = f'https://shikimori.one/api/user_rates/{id}'
        return self.session.request("DELETE", url, **kwargs)
    
    def cleanup(self, type, **kwargs) -> Response:
        """Delete entire user rates and history
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/user_rates/{type}/cleanup'
        return self.session.request("DELETE", url, **kwargs)
    
    def reset(self, type, **kwargs) -> Response:
        """Reset all user scores to 0
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/user_rates/{type}/reset'
        return self.session.request("DELETE", url, **kwargs)
    

class Users:
    """https://shikimori.one/api/doc/1.0/users 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, **kwargs) -> Response:
        """List users
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
        """
        url = 'https://shikimori.one/api/users'
        return self.session.request("GET", url, **kwargs)
    
    def show(self, id, **kwargs) -> Response:
        """Show an user
    
        Deprecated:
            False
        
        Params:
            is_nickname (string). Required - False. Must be one of: <code>1</code>.
        """
        url = f'https://shikimori.one/api/users/{id}'
        return self.session.request("GET", url, **kwargs)
    
    def info(self, id, **kwargs) -> Response:
        """Show user's brief info
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/info'
        return self.session.request("GET", url, **kwargs)
    
    def whoami(self, **kwargs) -> Response:
        """Show current user's brief info
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/users/whoami'
        return self.session.request("GET", url, **kwargs)
    
    def sign_out(self, **kwargs) -> Response:
        """Sign out the user
    
        Deprecated:
            False
        
        Params:
            
        """
        url = 'https://shikimori.one/api/users/sign_out'
        return self.session.request("GET", url, **kwargs)
    
    def friends(self, id, **kwargs) -> Response:
        """Show user's friends
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/friends'
        return self.session.request("GET", url, **kwargs)
    
    def clubs(self, id, **kwargs) -> Response:
        """Show user's clubs
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/clubs'
        return self.session.request("GET", url, **kwargs)
    
    def anime_rates(self, id, **kwargs) -> Response:
        """Show user's anime list
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            status (string). Required - False. Must be one of: <code>planned</code>, <code>watching</code>, <code>rewatching</code>, <code>completed</code>, <code>on_hold</code>, <code>dropped</code>.
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
        """
        url = f'https://shikimori.one/api/users/{id}/anime_rates'
        return self.session.request("GET", url, **kwargs)
    
    def manga_rates(self, id, **kwargs) -> Response:
        """Show user's manga list
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            censored (string). Required - False. Must be one of: <code>true</code>, <code>false</code>.
        """
        url = f'https://shikimori.one/api/users/{id}/manga_rates'
        return self.session.request("GET", url, **kwargs)
    
    def favourites(self, id, **kwargs) -> Response:
        """Show user's favourites
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/favourites'
        return self.session.request("GET", url, **kwargs)
    
    def messages(self, id, **kwargs) -> Response:
        """Show current user's messages
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            type (string). Required - True. Must be one of: <code>inbox</code>, <code>private</code>, <code>sent</code>, <code>news</code>, <code>notifications</code>.
        """
        url = f'https://shikimori.one/api/users/{id}/messages'
        return self.session.request("GET", url, **kwargs)
    
    def unread_messages(self, id, **kwargs) -> Response:
        """Show current user's unread messages counts
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/unread_messages'
        return self.session.request("GET", url, **kwargs)
    
    def history(self, id, **kwargs) -> Response:
        """Show user history
    
        Deprecated:
            False
        
        Params:
            page (string). Required - False. Must be a number between 1 and 100000.
            limit (numeric). Required - False. Must be a number.
            target_id (numeric). Required - False. Must be a number.
            target_type (string). Required - False. Must be one of: <code>Anime</code>, <code>Manga</code>.
        """
        url = f'https://shikimori.one/api/users/{id}/history'
        return self.session.request("GET", url, **kwargs)
    
    def bans(self, id, **kwargs) -> Response:
        """Show user's bans
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/users/{id}/bans'
        return self.session.request("GET", url, **kwargs)
    

class Videos:
    """https://shikimori.one/api/doc/1.0/videos 
    
    deprecated=False
    """
    
    def __init__(self, session):
        self.session = session
    
    def index(self, anime_id, **kwargs) -> Response:
        """List videos
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{anime_id}/videos'
        return self.session.request("GET", url, **kwargs)
    
    def create(self, anime_id, **kwargs) -> Response:
        """Create a video
    
        Deprecated:
            False
        
        Params:
            video (hash). Required - False. Must be a Hash
        """
        url = f'https://shikimori.one/api/animes/{anime_id}/videos'
        return self.session.request("POST", url, **kwargs)
    
    def destroy(self, anime_id, **kwargs) -> Response:
        """Destroy a video
    
        Deprecated:
            False
        
        Params:
            
        """
        url = f'https://shikimori.one/api/animes/{anime_id}/videos/:id'
        return self.session.request("DELETE", url, **kwargs)
    
